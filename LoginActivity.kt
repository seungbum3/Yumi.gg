package com.example.yumi2

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.google.android.gms.auth.api.identity.BeginSignInRequest
import com.google.android.gms.auth.api.identity.Identity
import com.google.android.gms.auth.api.identity.SignInClient
import com.google.android.gms.common.SignInButton
import com.google.android.gms.common.api.ApiException
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.GoogleAuthProvider
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.Timestamp

class LoginActivity : AppCompatActivity() {

    private lateinit var auth: FirebaseAuth
    private lateinit var oneTapClient: SignInClient
    private lateinit var signInRequest: BeginSignInRequest
    private val firestore = FirebaseFirestore.getInstance()

    private val GOOGLE_SIGN_IN_REQUEST_CODE = 100

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.login)

        auth = FirebaseAuth.getInstance()

        // üîπ UI ÏöîÏÜå Ï¥àÍ∏∞Ìôî
        val btnGoogleSignIn: SignInButton = findViewById(R.id.btnGoogleSignIn)
        val btnLogin: Button = findViewById(R.id.btnLogin)
        val btnRegister: TextView = findViewById(R.id.btnRegister)
        val idInput = findViewById<EditText>(R.id.editTextId)
        val passwordInput = findViewById<EditText>(R.id.editTextPassword)

        // üîπ Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Ï¥àÍ∏∞Ìôî
        oneTapClient = Identity.getSignInClient(this)
        signInRequest = BeginSignInRequest.builder()
            .setGoogleIdTokenRequestOptions(
                BeginSignInRequest.GoogleIdTokenRequestOptions.builder()
                    .setSupported(true)
                    .setServerClientId(getString(R.string.default_web_client_id))
                    .setFilterByAuthorizedAccounts(false)
                    .build()
            ).build()

        // üîπ Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
        btnGoogleSignIn.setOnClickListener {
            signInWithGoogle()
        }

        // üîπ ÌöåÏõêÍ∞ÄÏûÖ Ïù¥Îèô
        btnRegister.setOnClickListener {
            val intent = Intent(this, JoinActivity::class.java)
            startActivity(intent)
        }

        // üîπ FirestoreÏóêÏÑú ÏïÑÏù¥Îîî & ÎπÑÎ∞ÄÎ≤àÌò∏ Ï≤¥ÌÅ¨ ÌõÑ Î°úÍ∑∏Ïù∏
        btnLogin.setOnClickListener {
            val id = idInput.text.toString().trim()
            val password = passwordInput.text.toString().trim()

            if (id.isNotEmpty() && password.isNotEmpty()) {
                checkLogin(id, password)
            } else {
                Toast.makeText(this, "ÏïÑÏù¥ÎîîÏôÄ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.", Toast.LENGTH_SHORT).show()
            }
        }
    }

    // üîπ FirestoreÏóêÏÑú Ïú†Ï†Ä ÌôïÏù∏ ÌõÑ Î°úÍ∑∏Ïù∏ ÏßÑÌñâ
    private fun checkLogin(id: String, password: String) {
        firestore.collection("users")
            .whereEqualTo("id", id) // FirestoreÏóêÏÑú ÏûÖÎ†•Ìïú IDÏôÄ ÎèôÏùºÌïú Î¨∏ÏÑúÎ•º Í≤ÄÏÉâ
            .get()
            .addOnSuccessListener { documents ->
                if (!documents.isEmpty) {
                    for (document in documents) {
                        val storedPassword = document.getString("password") // üîπ FirestoreÏóêÏÑú ÎπÑÎ∞ÄÎ≤àÌò∏ Í∞ÄÏ†∏Ïò§Í∏∞
                        Log.d("FirestoreLogin", "DB Ï†ÄÏû•Îêú ÎπÑÎ∞ÄÎ≤àÌò∏: $storedPassword") // üîπ ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏ Ï∂îÍ∞Ä
                        val sharedPref = getSharedPreferences("UserPrefs", Context.MODE_PRIVATE)
                        with(sharedPref.edit()) {
                            putString("loggedInUserId", id)
                            apply()
                        }
                        if (storedPassword != null) {
                            if (storedPassword == password.trim()) { // üîπ ÏûÖÎ†•Ìïú ÎπÑÎ∞ÄÎ≤àÌò∏ÏôÄ FirestoreÏóê Ï†ÄÏû•Îêú Í∞í ÎπÑÍµê
                                Toast.makeText(this, "Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ!", Toast.LENGTH_SHORT).show()
                                navigateToMainPage()
                                return@addOnSuccessListener
                            } else {
                                Toast.makeText(this, "ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                            }
                        } else {
                            Toast.makeText(this, "ÎπÑÎ∞ÄÎ≤àÌò∏ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                        }
                    }
                } else {
                    Toast.makeText(this, "Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÏïÑÏù¥ÎîîÏûÖÎãàÎã§.", Toast.LENGTH_SHORT).show()
                }
            }
            .addOnFailureListener { exception ->
                Toast.makeText(this, "Î°úÍ∑∏Ïù∏ Ïò§Î•ò Î∞úÏÉù: ${exception.message}", Toast.LENGTH_SHORT).show()
                Log.e("FirestoreLogin", "Î°úÍ∑∏Ïù∏ Ïò§Î•ò", exception)
            }
    }

    // üîπ Î©îÏù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    private fun navigateToMainPage() {
        try {
            val intent = Intent(this, MainpageActivity::class.java)
            startActivity(intent)
            finish() // Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ Ï¢ÖÎ£å
        } catch (e: Exception) {
            Log.e("LoginActivity", "Î©îÏù∏ ÌéòÏù¥ÏßÄ Ïù¥Îèô Ïò§Î•ò: ${e.message}", e)
        }
    }

    // üîπ Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ ÏãúÏûë
    private fun signInWithGoogle() {
        oneTapClient.beginSignIn(signInRequest)
            .addOnSuccessListener { result ->
                try {
                    startIntentSenderForResult(
                        result.pendingIntent.intentSender, GOOGLE_SIGN_IN_REQUEST_CODE,
                        null, 0, 0, 0, null
                    )
                } catch (e: Exception) {
                    Log.e("GoogleSignIn", "Google Sign-In Failed", e)
                    Toast.makeText(this, "Google Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ${e.message}", Toast.LENGTH_LONG).show()
                }
            }
            .addOnFailureListener { e ->
                Log.e("GoogleSignIn", "Sign-In Request Failed", e)
                Toast.makeText(this, "Google Î°úÍ∑∏Ïù∏ ÏöîÏ≤≠ Ïã§Ìå®: ${e.message}", Toast.LENGTH_LONG).show()
            }
    }

    // üîπ Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Í≤∞Í≥º Ï≤òÎ¶¨
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == GOOGLE_SIGN_IN_REQUEST_CODE) {
            try {
                val credential = oneTapClient.getSignInCredentialFromIntent(data)
                val idToken = credential.googleIdToken
                if (idToken != null) {
                    val firebaseCredential = GoogleAuthProvider.getCredential(idToken, null)
                    auth.signInWithCredential(firebaseCredential)
                        .addOnCompleteListener(this) { task ->
                            if (task.isSuccessful) {
                                val user = auth.currentUser
                                if (user != null) {
                                    val email = user.email ?: "unknown"
                                    val uid = user.uid

                                    // üîπ FirestoreÏóêÏÑú Ïù¥Î©îÏùºÏùÑ Î¨∏ÏÑú IDÎ°ú Î≥ÄÌôò ('.' ‚Üí '_')
                                    val sanitizedEmail = email.replace(".", "_")

                                    // üîπ FirestoreÏóê ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†ÄÏû• (Ï§ëÎ≥µ Î∞©ÏßÄ)
                                    val userRef = firestore.collection("users").document(sanitizedEmail)
                                    userRef.get().addOnSuccessListener { document ->
                                        if (!document.exists()) {
                                            // üîπ FirestoreÏóê TimestampÎ°ú ÏãúÍ∞Ñ Ï†ÄÏû•
                                            val userData = hashMapOf(
                                                "email" to email,
                                                "uid" to uid,
                                                "createdAt" to com.google.firebase.Timestamp.now()
                                            )
                                            userRef.set(userData)
                                                .addOnSuccessListener {
                                                    Log.d("GoogleSignIn", "FirestoreÏóê ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†ÄÏû• ÏôÑÎ£å: $email")
                                                }
                                                .addOnFailureListener { e ->
                                                    Log.e("GoogleSignIn", "Firestore Ï†ÄÏû• Ïã§Ìå®", e)
                                                }
                                        } else {
                                            Log.d("GoogleSignIn", "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï®: $email")
                                        }
                                    }

                                    Toast.makeText(this, "Google Í∞ÑÌé∏ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ", Toast.LENGTH_SHORT).show()
                                    navigateToMainPage()
                                }
                            } else {
                                Log.e("GoogleSignIn", "Google Î°úÍ∑∏Ïù∏ Ïã§Ìå®", task.exception)
                                Toast.makeText(this, "Google Î°úÍ∑∏Ïù∏ Ïã§Ìå®", Toast.LENGTH_SHORT).show()
                            }
                        }
                }
            } catch (e: ApiException) {
                Log.e("GoogleSignIn", "Sign-in failed: ${e.message}")
                Toast.makeText(this, "Google Î°úÍ∑∏Ïù∏ Ïò§Î•ò: ${e.message}", Toast.LENGTH_LONG).show()
            }
        }
    }

}
